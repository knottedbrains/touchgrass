import { Settings } from './settings';
import { CallStackEntry, WeaveClient } from './weaveClient';
export declare let globalClient: WeaveClient | null;
/**
 * Log in to Weights & Biases (W&B) using the provided API key.
 * This function attempts to save the credentials to your netrc file for future use,
 * but will continue even if it cannot write to the file system.
 *
 * @param {string} apiKey - Your W&B API key.
 * @param {string} [host] - (Optional) The host name (usually only needed if you're using a custom W&B server).
 * @throws {Error} If the API key is not specified or if the connection to the weave trace server cannot be verified.
 */
export declare function login(apiKey: string, host?: string): Promise<void>;
/**
 * Initialize the Weave client, which is required for weave tracing to work.
 *
 * @param project - The W&B project name (can be project or entity/project).
 * @param settings - (Optional) Weave tracing settings
 * @returns A promise that resolves to the initialized Weave client.
 * @throws {Error} If the initialization fails
 */
export declare function init(project: string, settings?: Settings): Promise<WeaveClient>;
export declare function requireCurrentCallStackEntry(): CallStackEntry;
export declare function requireCurrentChildSummary(): {
    [key: string]: any;
};
export declare function getGlobalClient(): WeaveClient | null;
export declare function requireGlobalClient(): WeaveClient;
export declare function setGlobalClient(client: WeaveClient): void;
//# sourceMappingURL=clientApi.d.ts.map