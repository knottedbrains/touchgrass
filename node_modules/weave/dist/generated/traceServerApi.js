"use strict";
/* eslint-disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.HttpClient = exports.ContentType = void 0;
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["Text"] = "text/plain";
})(ContentType || (exports.ContentType = ContentType = {}));
class HttpClient {
    constructor(apiConfig = {}) {
        this.baseUrl = 'https://api.wandb.ai';
        this.securityData = null;
        this.abortControllers = new Map();
        this.customFetch = (...fetchParams) => fetch(...fetchParams);
        this.baseApiParams = {
            credentials: 'same-origin',
            headers: {},
            redirect: 'follow',
            referrerPolicy: 'no-referrer',
        };
        this.setSecurityData = (data) => {
            this.securityData = data;
        };
        this.contentFormatters = {
            [ContentType.Json]: (input) => input !== null && (typeof input === 'object' || typeof input === 'string')
                ? JSON.stringify(input)
                : input,
            [ContentType.Text]: (input) => input !== null && typeof input !== 'string'
                ? JSON.stringify(input)
                : input,
            [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((formData, key) => {
                const property = input[key];
                formData.append(key, property instanceof Blob
                    ? property
                    : typeof property === 'object' && property !== null
                        ? JSON.stringify(property)
                        : `${property}`);
                return formData;
            }, new FormData()),
            [ContentType.UrlEncoded]: (input) => this.toQueryString(input),
        };
        this.createAbortSignal = (cancelToken) => {
            if (this.abortControllers.has(cancelToken)) {
                const abortController = this.abortControllers.get(cancelToken);
                if (abortController) {
                    return abortController.signal;
                }
                return void 0;
            }
            const abortController = new AbortController();
            this.abortControllers.set(cancelToken, abortController);
            return abortController.signal;
        };
        this.abortRequest = (cancelToken) => {
            const abortController = this.abortControllers.get(cancelToken);
            if (abortController) {
                abortController.abort();
                this.abortControllers.delete(cancelToken);
            }
        };
        this.request = async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }) => {
            const secureParams = ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&
                this.securityWorker &&
                (await this.securityWorker(this.securityData))) ||
                {};
            const requestParams = this.mergeRequestParams(params, secureParams);
            const queryString = query && this.toQueryString(query);
            const payloadFormatter = this.contentFormatters[type || ContentType.Json];
            const responseFormat = format || requestParams.format;
            return this.customFetch(`${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`, {
                ...requestParams,
                headers: {
                    ...(requestParams.headers || {}),
                    ...(type && type !== ContentType.FormData
                        ? { 'Content-Type': type }
                        : {}),
                },
                signal: (cancelToken
                    ? this.createAbortSignal(cancelToken)
                    : requestParams.signal) || null,
                body: typeof body === 'undefined' || body === null
                    ? null
                    : payloadFormatter(body),
            }).then(async (response) => {
                const r = response.clone();
                r.data = null;
                r.error = null;
                const data = !responseFormat
                    ? r
                    : await response[responseFormat]()
                        .then(data => {
                        if (r.ok) {
                            r.data = data;
                        }
                        else {
                            r.error = data;
                        }
                        return r;
                    })
                        .catch(e => {
                        r.error = e;
                        return r;
                    });
                if (cancelToken) {
                    this.abortControllers.delete(cancelToken);
                }
                if (!response.ok)
                    throw data;
                return data;
            });
        };
        Object.assign(this, apiConfig);
    }
    encodeQueryParam(key, value) {
        const encodedKey = encodeURIComponent(key);
        return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`;
    }
    addQueryParam(query, key) {
        return this.encodeQueryParam(key, query[key]);
    }
    addArrayQueryParam(query, key) {
        const value = query[key];
        return value.map((v) => this.encodeQueryParam(key, v)).join('&');
    }
    toQueryString(rawQuery) {
        const query = rawQuery || {};
        const keys = Object.keys(query).filter(key => 'undefined' !== typeof query[key]);
        return keys
            .map(key => Array.isArray(query[key])
            ? this.addArrayQueryParam(query, key)
            : this.addQueryParam(query, key))
            .join('&');
    }
    addQueryParams(rawQuery) {
        const queryString = this.toQueryString(rawQuery);
        return queryString ? `?${queryString}` : '';
    }
    mergeRequestParams(params1, params2) {
        return {
            ...this.baseApiParams,
            ...params1,
            ...(params2 || {}),
            headers: {
                ...(this.baseApiParams.headers || {}),
                ...(params1.headers || {}),
                ...((params2 && params2.headers) || {}),
            },
        };
    }
}
exports.HttpClient = HttpClient;
/**
 * @title FastAPI
 * @version 0.1.0
 * @baseUrl https://api.wandb.ai
 */
class Api extends HttpClient {
    constructor() {
        super(...arguments);
        this.health = {
            /**
             * No description
             *
             * @tags Service
             * @name ReadRootHealthGet
             * @summary Read Root
             * @request GET:/health
             */
            readRootHealthGet: (params = {}) => this.request({
                path: `/health`,
                method: 'GET',
                format: 'json',
                ...params,
            }),
        };
        this.serverInfo = {
            /**
             * No description
             *
             * @tags Service
             * @name ServerInfoServerInfoGet
             * @summary Server Info
             * @request GET:/server_info
             */
            serverInfoServerInfoGet: (params = {}) => this.request({
                path: `/server_info`,
                method: 'GET',
                format: 'json',
                ...params,
            }),
        };
        this.call = {
            /**
             * No description
             *
             * @tags Calls
             * @name CallStartCallStartPost
             * @summary Call Start
             * @request POST:/call/start
             * @secure
             */
            callStartCallStartPost: (data, params = {}) => this.request({
                path: `/call/start`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Calls
             * @name CallEndCallEndPost
             * @summary Call End
             * @request POST:/call/end
             * @secure
             */
            callEndCallEndPost: (data, params = {}) => this.request({
                path: `/call/end`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Calls
             * @name CallStartBatchCallUpsertBatchPost
             * @summary Call Start Batch
             * @request POST:/call/upsert_batch
             * @secure
             */
            callStartBatchCallUpsertBatchPost: (data, params = {}) => this.request({
                path: `/call/upsert_batch`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Calls
             * @name CallUpdateCallUpdatePost
             * @summary Call Update
             * @request POST:/call/update
             * @secure
             */
            callUpdateCallUpdatePost: (data, params = {}) => this.request({
                path: `/call/update`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Calls
             * @name CallReadCallReadPost
             * @summary Call Read
             * @request POST:/call/read
             * @secure
             */
            callReadCallReadPost: (data, params = {}) => this.request({
                path: `/call/read`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.calls = {
            /**
             * No description
             *
             * @tags Calls
             * @name CallsDeleteCallsDeletePost
             * @summary Calls Delete
             * @request POST:/calls/delete
             * @secure
             */
            callsDeleteCallsDeletePost: (data, params = {}) => this.request({
                path: `/calls/delete`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Calls
             * @name CallsQueryStatsCallsQueryStatsPost
             * @summary Calls Query Stats
             * @request POST:/calls/query_stats
             * @secure
             */
            callsQueryStatsCallsQueryStatsPost: (data, params = {}) => this.request({
                path: `/calls/query_stats`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Calls
             * @name CallsQueryStreamCallsStreamQueryPost
             * @summary Calls Query Stream
             * @request POST:/calls/stream_query
             * @secure
             */
            callsQueryStreamCallsStreamQueryPost: (data, params = {}) => this.request({
                path: `/calls/stream_query`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.obj = {
            /**
             * No description
             *
             * @tags Objects
             * @name ObjCreateObjCreatePost
             * @summary Obj Create
             * @request POST:/obj/create
             * @secure
             */
            objCreateObjCreatePost: (data, params = {}) => this.request({
                path: `/obj/create`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Objects
             * @name ObjReadObjReadPost
             * @summary Obj Read
             * @request POST:/obj/read
             * @secure
             */
            objReadObjReadPost: (data, params = {}) => this.request({
                path: `/obj/read`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.objs = {
            /**
             * No description
             *
             * @tags Objects
             * @name ObjsQueryObjsQueryPost
             * @summary Objs Query
             * @request POST:/objs/query
             * @secure
             */
            objsQueryObjsQueryPost: (data, params = {}) => this.request({
                path: `/objs/query`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.table = {
            /**
             * No description
             *
             * @tags Tables
             * @name TableCreateTableCreatePost
             * @summary Table Create
             * @request POST:/table/create
             * @secure
             */
            tableCreateTableCreatePost: (data, params = {}) => this.request({
                path: `/table/create`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Tables
             * @name TableUpdateTableUpdatePost
             * @summary Table Update
             * @request POST:/table/update
             * @secure
             */
            tableUpdateTableUpdatePost: (data, params = {}) => this.request({
                path: `/table/update`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Tables
             * @name TableQueryTableQueryPost
             * @summary Table Query
             * @request POST:/table/query
             * @secure
             */
            tableQueryTableQueryPost: (data, params = {}) => this.request({
                path: `/table/query`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Tables
             * @name TableQueryStatsTableQueryStatsPost
             * @summary Table Query Stats
             * @request POST:/table/query_stats
             * @secure
             */
            tableQueryStatsTableQueryStatsPost: (data, params = {}) => this.request({
                path: `/table/query_stats`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.refs = {
            /**
             * No description
             *
             * @tags Refs
             * @name RefsReadBatchRefsReadBatchPost
             * @summary Refs Read Batch
             * @request POST:/refs/read_batch
             * @secure
             */
            refsReadBatchRefsReadBatchPost: (data, params = {}) => this.request({
                path: `/refs/read_batch`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.file = {
            /**
             * No description
             *
             * @tags Files
             * @name FileCreateFileCreatePost
             * @summary File Create
             * @request POST:/file/create
             * @secure
             */
            fileCreateFileCreatePost: (data, params = {}) => this.request({
                path: `/file/create`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.FormData,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Files
             * @name FileContentFileContentPost
             * @summary File Content
             * @request POST:/file/content
             * @secure
             */
            fileContentFileContentPost: (data, params = {}) => this.request({
                path: `/file/content`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.cost = {
            /**
             * No description
             *
             * @tags Costs
             * @name CostCreateCostCreatePost
             * @summary Cost Create
             * @request POST:/cost/create
             * @secure
             */
            costCreateCostCreatePost: (data, params = {}) => this.request({
                path: `/cost/create`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Costs
             * @name CostQueryCostQueryPost
             * @summary Cost Query
             * @request POST:/cost/query
             * @secure
             */
            costQueryCostQueryPost: (data, params = {}) => this.request({
                path: `/cost/query`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Costs
             * @name CostPurgeCostPurgePost
             * @summary Cost Purge
             * @request POST:/cost/purge
             * @secure
             */
            costPurgeCostPurgePost: (data, params = {}) => this.request({
                path: `/cost/purge`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
        this.feedback = {
            /**
             * @description Add feedback to a call or object.
             *
             * @tags Feedback
             * @name FeedbackCreateFeedbackCreatePost
             * @summary Feedback Create
             * @request POST:/feedback/create
             * @secure
             */
            feedbackCreateFeedbackCreatePost: (data, params = {}) => this.request({
                path: `/feedback/create`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * @description Query for feedback.
             *
             * @tags Feedback
             * @name FeedbackQueryFeedbackQueryPost
             * @summary Feedback Query
             * @request POST:/feedback/query
             * @secure
             */
            feedbackQueryFeedbackQueryPost: (data, params = {}) => this.request({
                path: `/feedback/query`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * @description Permanently delete feedback.
             *
             * @tags Feedback
             * @name FeedbackPurgeFeedbackPurgePost
             * @summary Feedback Purge
             * @request POST:/feedback/purge
             * @secure
             */
            feedbackPurgeFeedbackPurgePost: (data, params = {}) => this.request({
                path: `/feedback/purge`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
            /**
             * No description
             *
             * @tags Feedback
             * @name FeedbackReplaceFeedbackReplacePost
             * @summary Feedback Replace
             * @request POST:/feedback/replace
             * @secure
             */
            feedbackReplaceFeedbackReplacePost: (data, params = {}) => this.request({
                path: `/feedback/replace`,
                method: 'POST',
                body: data,
                secure: true,
                type: ContentType.Json,
                format: 'json',
                ...params,
            }),
        };
    }
}
exports.Api = Api;
//# sourceMappingURL=traceServerApi.js.map