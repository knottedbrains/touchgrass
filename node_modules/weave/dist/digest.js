"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeDigest = computeDigest;
exports.stringDigest = stringDigest;
exports.encodeNumber = encodeNumber;
exports.stringifyPythonDumps = stringifyPythonDumps;
exports.valDigest = valDigest;
const buffer_1 = require("buffer");
const crypto_1 = __importDefault(require("crypto"));
function computeDigest(data) {
    // Must match python server algorithm in clickhouse_trace_server_batched.py
    const hasher = crypto_1.default.createHash('sha256');
    hasher.update(data);
    const hashBytes = hasher.digest();
    const base64EncodedHash = hashBytes.toString('base64url');
    return base64EncodedHash
        .replace(/-/g, 'X')
        .replace(/_/g, 'Y')
        .replace(/=/g, '');
}
function stringDigest(data) {
    return computeDigest(buffer_1.Buffer.from(data));
}
function encodeNumber(num) {
    return String(num);
}
function stringifyPythonDumps(obj) {
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'string') {
        return JSON.stringify(obj);
    }
    if (typeof obj === 'number' || typeof obj === 'boolean') {
        return String(obj);
    }
    if (Array.isArray(obj)) {
        const items = obj.map(stringifyPythonDumps);
        return '[' + items.join(', ') + ']';
    }
    if (typeof obj === 'object') {
        const pairs = Object.keys(obj)
            .sort()
            .map(key => JSON.stringify(key) + ': ' + stringifyPythonDumps(obj[key]));
        return '{' + pairs.join(', ') + '}';
    }
    throw new Error('Unsupported type');
}
function valDigest(data) {
    return stringDigest(stringifyPythonDumps(data));
}
//# sourceMappingURL=digest.js.map