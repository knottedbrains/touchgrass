"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalClient = void 0;
exports.login = login;
exports.init = init;
exports.requireCurrentCallStackEntry = requireCurrentCallStackEntry;
exports.requireCurrentChildSummary = requireCurrentChildSummary;
exports.getGlobalClient = getGlobalClient;
exports.requireGlobalClient = requireGlobalClient;
exports.setGlobalClient = setGlobalClient;
const traceServerApi_1 = require("./generated/traceServerApi");
const urls_1 = require("./urls");
const concurrencyLimit_1 = require("./utils/concurrencyLimit");
const netrc_1 = require("./utils/netrc");
const retry_1 = require("./utils/retry");
const settings_1 = require("./wandb/settings");
const wandbServerApi_1 = require("./wandb/wandbServerApi");
const weaveClient_1 = require("./weaveClient");
// Global client instance
exports.globalClient = null;
/**
 * Log in to Weights & Biases (W&B) using the provided API key.
 * This function attempts to save the credentials to your netrc file for future use,
 * but will continue even if it cannot write to the file system.
 *
 * @param {string} apiKey - Your W&B API key.
 * @param {string} [host] - (Optional) The host name (usually only needed if you're using a custom W&B server).
 * @throws {Error} If the API key is not specified or if the connection to the weave trace server cannot be verified.
 */
async function login(apiKey, host) {
    if (!host) {
        console.warn('No host provided, using default host:', urls_1.defaultHost);
        host = urls_1.defaultHost;
    }
    if (!apiKey) {
        throw new Error('API key is required for login. Please provide a valid API key.');
    }
    const { traceBaseUrl } = (0, urls_1.getUrls)(host);
    // Test the connection to the traceServerApi
    const testTraceServerApi = new traceServerApi_1.Api({
        baseUrl: traceBaseUrl,
        baseApiParams: {
            headers: {
                'User-Agent': `W&B Weave JS Client ${process.env.VERSION || 'unknown'}`,
                Authorization: `Basic ${Buffer.from(`api:${apiKey}`).toString('base64')}`,
            },
        },
    });
    try {
        await testTraceServerApi.health.readRootHealthGet({});
    }
    catch (error) {
        throw new Error('Unable to verify connection to the weave trace server with given API Key');
    }
    // Try to save to netrc, but continue even if it fails
    try {
        const netrc = new netrc_1.Netrc();
        if (host && apiKey.trim()) {
            netrc.setEntry({ machine: host, login: 'user', password: apiKey });
            netrc.save();
            console.log(`Successfully logged in. Credentials saved for ${host}`);
        }
    }
    catch (error) {
        // Log warning but don't fail - the API key can still be used from environment
        console.warn('Could not save credentials to netrc file. You may need to set WANDB_API_KEY environment variable for future sessions.');
    }
    // Set the API key in the environment for the current session
    process.env.WANDB_API_KEY = apiKey;
}
/**
 * Initialize the Weave client, which is required for weave tracing to work.
 *
 * @param project - The W&B project name (can be project or entity/project).
 * @param settings - (Optional) Weave tracing settings
 * @returns A promise that resolves to the initialized Weave client.
 * @throws {Error} If the initialization fails
 */
async function init(project, settings) {
    const { apiKey, baseUrl, traceBaseUrl, domain } = (0, settings_1.getWandbConfigs)();
    try {
        const wandbServerApi = new wandbServerApi_1.WandbServerApi(baseUrl, apiKey);
        let entityName;
        let projectName;
        if (project.includes('/')) {
            [entityName, projectName] = project.split('/');
        }
        else {
            entityName = await wandbServerApi.defaultEntityName();
            projectName = project;
        }
        const projectId = `${entityName}/${projectName}`;
        const retryFetch = (0, retry_1.createFetchWithRetry)({
            baseDelay: 1000,
            maxDelay: 5 * 60 * 1000, // 5 minutes
            maxRetryTime: 12 * 60 * 60 * 1000, // 12 hours
            retryOnStatus: (status) => status === 429 || (status >= 500 && status < 600),
        });
        const concurrencyLimiter = new concurrencyLimit_1.ConcurrencyLimiter(20);
        const concurrencyLimitedFetch = concurrencyLimiter.limitFunction(async (...fetchParams) => {
            const result = await retryFetch(...fetchParams);
            // Useful for debugging
            // console.log(`Active: ${concurrencyLimiter.active} Pending: ${concurrencyLimiter.pending}`);
            return result;
        });
        const traceServerApi = new traceServerApi_1.Api({
            baseUrl: traceBaseUrl,
            baseApiParams: {
                headers: {
                    'User-Agent': `W&B Weave JS Client ${process.env.VERSION || 'unknown'}`,
                    Authorization: `Basic ${Buffer.from(`api:${apiKey}`).toString('base64')}`,
                },
            },
            customFetch: concurrencyLimitedFetch,
        });
        const client = new weaveClient_1.WeaveClient(traceServerApi, wandbServerApi, projectId, settings);
        setGlobalClient(client);
        (0, urls_1.setGlobalDomain)(domain);
        console.log(`Initializing project: ${projectId}`);
        return client;
    }
    catch (error) {
        console.error('Error during initialization:', error);
        throw error;
    }
}
function requireCurrentCallStackEntry() {
    const client = getGlobalClient();
    if (!client) {
        throw new Error('Weave client not initialized');
    }
    const callStackEntry = client.getCallStack().peek();
    if (!callStackEntry) {
        throw new Error('No current call stack entry');
    }
    return callStackEntry;
}
function requireCurrentChildSummary() {
    const callStackEntry = requireCurrentCallStackEntry();
    return callStackEntry.childSummary;
}
function getGlobalClient() {
    return exports.globalClient;
}
function requireGlobalClient() {
    const client = getGlobalClient();
    if (!client) {
        throw new Error('Weave client not initialized');
    }
    return client;
}
function setGlobalClient(client) {
    exports.globalClient = client;
}
//# sourceMappingURL=clientApi.js.map