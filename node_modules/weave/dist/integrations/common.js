"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamReducer = void 0;
exports.summarizer = summarizer;
exports.streamReducer = {
    initialStateFn: () => ({
        messages: [],
    }),
    reduceFn: (state, chunk) => {
        var _a;
        let lastMessage;
        switch (chunk.type) {
            case 'message_start':
                state.messages.push({ ...chunk.message, content: [] });
                break;
            case 'message_delta':
                lastMessage = state.messages[state.messages.length - 1];
                Object.assign(lastMessage, chunk.delta);
                Object.assign((_a = lastMessage.usage) !== null && _a !== void 0 ? _a : {}, chunk.usage);
                break;
            case 'content_block_start':
                lastMessage = state.messages[state.messages.length - 1];
                lastMessage.content.push(chunk.content_block);
                break;
            case 'content_block_delta':
                lastMessage = state.messages[state.messages.length - 1];
                lastMessage.content.push(chunk.delta);
                break;
        }
        return state;
    },
};
function summarizer(result) {
    var _a, _b;
    // Non-streaming mode
    if (result.usage != null && result.usage != null) {
        return {
            usage: {
                [result.model]: result.usage,
            },
        };
    }
    // Streaming mode
    if (result.messages != null && result.messages.length > 0) {
        const usage = {};
        for (const message of result.messages) {
            const { usage: messageUsage, model } = message;
            if (model == undefined || usage == undefined) {
                continue;
            }
            if (usage[model] == null) {
                usage[model] = {
                    input_tokens: 0,
                    output_tokens: 0,
                };
            }
            usage[model].input_tokens += (_a = messageUsage === null || messageUsage === void 0 ? void 0 : messageUsage.input_tokens) !== null && _a !== void 0 ? _a : 0;
            usage[model].output_tokens += (_b = messageUsage === null || messageUsage === void 0 ? void 0 : messageUsage.output_tokens) !== null && _b !== void 0 ? _b : 0;
        }
        return {
            usage,
        };
    }
    return {};
}
//# sourceMappingURL=common.js.map