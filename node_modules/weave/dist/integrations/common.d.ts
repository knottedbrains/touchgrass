import { StreamReducer } from '../opType';
export type Message = {
    id: string;
    role: string;
    type: string;
    model: string;
    content: Array<{
        type: string;
        text: string;
    }>;
    stop_reason: string;
    stop_sequence: any;
    usage?: any;
};
type StreamChunk = {
    type: 'message_start';
    message: Message;
} | {
    type: 'message_delta';
    delta: {
        stop_reason: string;
        stop_sequence: any;
    };
    usage: {
        output_tokens: number;
    };
} | {
    type: 'message_stop';
} | {
    type: 'content_block_start';
    index: number;
    content_block: {
        type: string;
        text: string;
    };
} | {
    type: 'content_block_delta';
    delta: {
        type: string;
        text: string;
    };
    usage: {
        output_tokens: number;
    };
} | {
    type: 'content_block_stop';
    index: number;
};
export interface ResultState {
    messages: Array<Message>;
}
export declare const streamReducer: StreamReducer<StreamChunk, ResultState>;
export declare function summarizer(result: any): {
    usage: {
        [x: number]: any;
    };
} | {
    usage?: undefined;
};
export {};
//# sourceMappingURL=common.d.ts.map