"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requirePackageJson = requirePackageJson;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
/*
 * This function is used to require a package.json file from a given base directory.
 * It first checks if the base directory is an absolute path, and if so, it just reads the package.json file from that path.
 * If the base directory is not an absolute path, it looks for the package.json file in the module paths.
 * If the package.json file is not found, it throws an error.
 *
 * @param baseDir - The base directory to look for the package.json file.
 * @param modulePaths - The module paths to look for the package.json file.
 * @returns The package.json file as a JSON object.
 */
function requirePackageJson(baseDir, modulePaths) {
    if (path_1.default.isAbsolute(baseDir)) {
        const candidate = path_1.default.join(baseDir, 'package.json');
        return JSON.parse(fs_1.default.readFileSync(candidate, 'utf8'));
    }
    for (const modulePath of modulePaths) {
        const candidate = path_1.default.join(modulePath, baseDir, 'package.json');
        try {
            return JSON.parse(fs_1.default.readFileSync(candidate, 'utf8'));
        }
        catch (e) {
            continue;
        }
    }
    throw new Error(`could not find ${baseDir}/package.json`);
}
//# sourceMappingURL=npmModuleUtils.js.map