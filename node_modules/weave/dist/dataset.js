"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dataset = exports.DatasetRowRef = void 0;
const clientApi_1 = require("./clientApi");
const table_1 = require("./table");
const weaveObject_1 = require("./weaveObject");
class DatasetRowRef {
    constructor(projectId, objId, digest, rowDigest) {
        this.projectId = projectId;
        this.objId = objId;
        this.digest = digest;
        this.rowDigest = rowDigest;
    }
    uri() {
        return `weave:///${this.projectId}/object/${this.objId}:${this.digest}/attr/rows/id/${this.rowDigest}`;
    }
}
exports.DatasetRowRef = DatasetRowRef;
/**
 * Dataset object with easy saving and automatic versioning
 *
 * @example
 * // Create a dataset
 * const dataset = new Dataset({
 *   id: 'grammar-dataset',
 *   rows: [
 *     { id: '0', sentence: "He no likes ice cream.", correction: "He doesn't like ice cream." },
 *     { id: '1', sentence: "She goed to the store.", correction: "She went to the store." },
 *     { id: '2', sentence: "They plays video games all day.", correction: "They play video games all day." }
 *   ]
 * })
 *
 * // Access a specific example
 * const exampleLabel = dataset.getRow(2).sentence;
 *
 * // Save the dataset
 * const ref = await dataset.save()
 *
 */
class Dataset extends weaveObject_1.WeaveObject {
    constructor(parameters) {
        const baseParameters = {
            name: parameters.name,
            description: parameters.description,
        };
        super(baseParameters);
        this.rows = new table_1.Table(parameters.rows);
    }
    async save() {
        return (0, clientApi_1.requireGlobalClient)().publish(this);
    }
    get length() {
        return this.rows.length;
    }
    async *[Symbol.asyncIterator]() {
        for (let i = 0; i < this.length; i++) {
            yield this.getRow(i);
        }
    }
    getRow(index) {
        const tableRow = this.rows.row(index);
        const datasetRow = { ...tableRow, __savedRef: undefined };
        if (this.__savedRef && tableRow.__savedRef) {
            datasetRow.__savedRef = Promise.all([
                this.__savedRef,
                tableRow.__savedRef,
            ]).then(([ref, tableRowRef]) => {
                return new DatasetRowRef(ref.projectId, ref.objectId, ref.digest, tableRowRef.rowDigest);
            });
        }
        return datasetRow;
    }
}
exports.Dataset = Dataset;
//# sourceMappingURL=dataset.js.map