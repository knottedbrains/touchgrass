interface Call {
    project_id: string;
    id: string;
    op_name: string;
    trace_id: string;
    parent_id: string | null;
    started_at: string;
    ended_at?: string;
    inputs: any;
    output?: any;
    exception?: string;
    [key: string]: any;
}
interface QueryParams {
    project_id: string;
    limit?: number;
    order_by?: keyof Call;
    order_dir?: 'asc' | 'desc';
    filters?: Partial<Call>;
}
export declare class InMemoryTraceServer {
    private _calls;
    private _objs;
    private _files;
    private _lastCallCount;
    private _lastChangeTime;
    call: {
        callStartBatchCallUpsertBatchPost: (batchReq: {
            batch: Array<{
                mode: "start" | "end";
                req: any;
            }>;
        }) => Promise<void>;
    };
    calls: {
        callsStreamQueryPost: (queryParams: QueryParams) => Promise<{
            calls: Call[];
            next_page_token: null;
        }>;
    };
    obj: {
        objCreateObjCreatePost: (req: {
            obj: {
                project_id: string;
                object_id: string;
                val: any;
            };
        }) => Promise<{
            data: {
                digest: string;
            };
        }>;
    };
    file: {
        fileCreateFileCreatePost: (data: {
            project_id: string;
            file: Blob;
        }) => Promise<{
            digest: string;
        }>;
    };
    private generateDigest;
    private _updateChangeTime;
    /**
     * Waits for all pending operations to complete by checking if the call count
     * has stabilized for a minimum period. This is specifically designed for tests
     * where we need to wait for the weave client's async batch processing.
     *
     * @param stabilizationTime - How long to wait for no changes (default: 50ms)
     * @param maxWaitTime - Maximum time to wait before giving up (default: 2000ms)
     * @param minWaitTime - Minimum time to wait even if calls appear immediately (default: 20ms)
     * @returns Promise that resolves when operations have stabilized
     */
    waitForPendingOperations(stabilizationTime?: number, maxWaitTime?: number, minWaitTime?: number): Promise<void>;
}
export {};
//# sourceMappingURL=inMemoryTraceServer.d.ts.map