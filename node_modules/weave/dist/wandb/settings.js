"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiKey = getApiKey;
exports.getWandbConfigs = getWandbConfigs;
const urls_1 = require("../urls");
const netrc_1 = require("../utils/netrc");
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const os = __importStar(require("node:os"));
const ini = __importStar(require("ini"));
function getBaseUrlFromConfig() {
    var _a;
    // Check environment first
    const envBaseUrl = process.env.WANDB_BASE_URL;
    if (envBaseUrl) {
        return envBaseUrl;
    }
    // Try to read from config file
    try {
        const configPath = path.join(os.homedir(), '.config', 'wandb', 'settings');
        if (fs.existsSync(configPath)) {
            const config = ini.parse(fs.readFileSync(configPath, 'utf-8'));
            if ((_a = config.default) === null || _a === void 0 ? void 0 : _a.wandb_base_url) {
                return config.default.wandb_base_url;
            }
        }
    }
    catch (error) {
        // Silently fail if we can't read the config file
        // This could happen in restricted environments like Deno
    }
    return undefined;
}
function getApiKeyFromNetrc(host) {
    var _a;
    try {
        const netrc = new netrc_1.Netrc();
        return (_a = netrc.entries.get(host)) === null || _a === void 0 ? void 0 : _a.password;
    }
    catch (error) {
        // Silently fail if we can't read the netrc file
        // This could happen in restricted environments like Deno
        return undefined;
    }
}
function getApiKey(host) {
    // 1. Check environment variable first
    const envApiKey = process.env.WANDB_API_KEY;
    if (envApiKey) {
        return envApiKey;
    }
    // 2. Try netrc file
    const netrcApiKey = getApiKeyFromNetrc(host);
    if (netrcApiKey) {
        return netrcApiKey;
    }
    // No API key found, throw informative error
    const domain = urls_1.defaultHost;
    const apiKeyNotFoundMessage = `
    wandb API key not found.
    
    Go to https://${domain}/authorize to get your API key.
    
    You can either:
    
    1. Set the WANDB_API_KEY environment variable
    2. Log in using weave.login()
    `;
    throw new Error(apiKeyNotFoundMessage);
}
function getWandbConfigs() {
    // Get base URL from environment or config
    const configBaseUrl = getBaseUrlFromConfig();
    const host = configBaseUrl ? new URL(configBaseUrl).host : urls_1.defaultHost;
    const apiKey = getApiKey(host);
    const { baseUrl, traceBaseUrl, domain, host: resolvedHost } = (0, urls_1.getUrls)(host);
    return { apiKey, baseUrl, traceBaseUrl, domain, resolvedHost };
}
//# sourceMappingURL=settings.js.map